class Solution {
    public List<Integer> topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(nums[i])) {
                map.put(nums[i], map.get(nums[i]) + 1);
            } else {
                map.put(nums[i], 1);
            }
        }
        
        PriorityQueue<Map.Entry<Integer, Integer>> heap = 
                         new PriorityQueue<>((num1, num2) -> num2.getValue() - num1.getValue());
        
        for (Map.Entry<Integer,Integer> entry : map.entrySet()) {
            heap.add(entry);
        }
        
        List<Integer> topKFrequent = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            topKFrequent.add(heap.poll().getKey());
        }
        
        return topKFrequent;
    }
}