class Solution {
    public List<List<Integer>> permute(int[] nums) {
        return permuteRecursive(nums);
    }
    
    public List<List<Integer>> permuteRecursive(int[] nums) {
        List<List<Integer>> permutations = new LinkedList<>();
        
        if (nums.length == 1) {
            List<Integer> permutation = new LinkedList<>();
            permutation.add(nums[0]);
            
            permutations.add(permutation);
        }
        
        for (int i = 0; i < nums.length; i++) {
            int firstElement = nums[i];
            
            int currentIndex = 0;
            int[] otherElements = new int[nums.length - 1];
            for (int j = 0; j < nums.length; j++) {
                if (i != j) {
                    otherElements[currentIndex] = nums[j];
                    currentIndex++;
                }
            }
            
            List<List<Integer>> currentPermutations = permuteRecursive(otherElements);
            for (List<Integer> permutation : currentPermutations) {
                permutation.add(0, firstElement);
            }
            
            permutations.addAll(currentPermutations);
        } 
        
        return permutations;
    }
}

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        return permuteRecursive(nums, 0);
    }
    
    public List<List<Integer>> permuteRecursive(int[] nums, int index) {
        List<List<Integer>> permutations = new LinkedList<>();
        
        if (index == nums.length - 1) {
            List<Integer> permutation = new ArrayList<>();
            for (int num : nums)
            {
                permutation.add(num);
            }
    
            permutations.add(permutation);
        }
        
        int[] numsCopy = nums.clone();
        
        for (int i = index; i < nums.length; i++) {
            if (i != index) {
                int temp = numsCopy[i];
                numsCopy[i] = numsCopy[index];
                numsCopy[index] = temp;
            }
            
            permutations.addAll(permuteRecursive(numsCopy, index + 1));
        } 
        
        return permutations;
    }
}